# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html


# useful for handling different item types with a single interface
from itemadapter import ItemAdapter

from datetime import datetime
import pytz

from django.db import IntegrityError
from nick.models import Nick, Category, Post


class SeedPipeline:
    def process_item(self, item, spider):
        return item


class NickDjangoPipeline(object):
    def process_item(self, item, spider):
        nick, created = Nick.objects.get_or_create(
            name=item['nick'], 
            defaults={
                'gender': None if item['gender'] is None else bool(item['gender'])
            })
            # gender=None if item['gender'] is None else bool(item['gender']))

        category, created= Category.objects.get_or_create(
            name=item['cat_name'], slug=item['cat_slug']
        )

        try:
            post = Post(
                title = item['title'],
                url = item['url'],        
                post_date = pytz.utc.localize(
                    datetime.strptime(item['post_date'], "%m/%d/%Y %H:%M:%S")),
                nick = nick,
                category = category,
                # is_op = None if item['is_op'] is None else bool(item['is_op']),
                reply_to = item['reply_to'],
                bytes = item['bytes'],
                hits = item['hits'],
                votes = item['votes']
            )
            post.save()
        except IntegrityError:
            logging.info("The post %s has been processed previously" % item['url'])
        return item
